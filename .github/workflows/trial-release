name: Release Drafter and Publisher
on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - develop
permissions:
  contents: write
  pull-requests: write
jobs:
  update_release_draft:
    # Run on pushes to develop, and on PR open/reopen/sync (but not closed)
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' &&
       github.event.action != 'closed')
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release_drafter  # Optional: Capture outputs like 'tag_name'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug draft releases
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases
  publish_draft:
    # Run only on merged PR to develop with exact 'publish' label
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (fromJson(github.event.pull_request.labels).*.name) includes 'publish'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Debug PR labels
        run: |
          echo "PR labels: ${{ toJSON(github.event.pull_request.labels) }}"
      - name: Check API rate limit
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/rate_limit
      - name: Publish latest draft release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              // Filter for RD's active untagged draft (adjust 'Next Release' to match your name-template if customized)
              const draft = releases.data.find(r => r.draft && !r.tag_name && r.name.startsWith('Next Release'));
              if (!draft) {
                core.setFailed("No untagged draft release found to publish. Check if Release Drafter created one.");
                return;
              }
              console.log(`Found draft release: ${draft.name} (ID: ${draft.id})`);
              const response = await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draft.id,
                draft: false,
                tag_name: draft.name.replace('Next Release', 'v'),  // Optional: Set tag to version (e.g., 'v1.2.3')
                make_latest: true  // Mark as latest
              });
              console.log(`API response: ${JSON.stringify(response.data, null, 2)}`);
              console.log(`âœ… Draft release "${draft.name}" published!`);
            } catch (error) {
              core.setFailed(`Failed to publish release: ${error.message}`);
            }
