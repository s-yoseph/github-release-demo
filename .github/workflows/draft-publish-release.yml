name: Draft and Publish Release

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1 → update the draft release
  update_release_draft:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    steps:
      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2 → publish draft release if merged PR has Publish label
  publish_draft:
    needs: update_release_draft
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Get last merged PR
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1,
              sha: context.sha,
            });
            const message = commits.data[0].commit.message;
            const match = message.match(/Merge pull request #(\d+)/);
            if (!match) {
              core.setOutput("publish", "false");
              return;
            }
            const prNumber = match[1];
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const hasPublish = pr.data.labels.some(l => l.name === 'Publish');
            core.setOutput("publish", hasPublish);

      - name: Publish latest draft release
        if: steps.pr.outputs.publish == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const draft = releases.data.find(r => r.draft);
            if (!draft) {
              console.log("❌ No draft release found to publish.");
              return;
            }
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: draft.id,
              draft: false
            });
            console.log(`✅ Draft release "${draft.tag_name}" published!`);
