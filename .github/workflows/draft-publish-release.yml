name: Release Drafter and Publisher
 
on:

  push:

    branches:

      - develop

  pull_request:

    types: [opened, reopened, synchronize, closed]

    branches:

      - develop
 
permissions:

  contents: write

  pull-requests: write
 
jobs:

  update_release_draft:

    if: github.event_name != 'pull_request' || github.event.action != 'closed'

    runs-on: ubuntu-latest

    steps:

      - uses: release-drafter/release-drafter@v6

        env:

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug draft releases

        run: |  
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases

  publish_draft:

    needs: update_release_draft

    if: >

      github.event_name == 'pull_request' &&

      github.event.action == 'closed' &&

      github.event.pull_request.merged == true &&

      contains(github.event.pull_request.labels.*.name, 'publish')

    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository

        uses: actions/checkout@v4

      - name: Debug PR labels

        run: |

          echo "PR labels: ${{ toJSON(github.event.pull_request.labels) }}"

      - name: Check API rate limit

        run: |

          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \

               -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/rate_limit

      - name: Publish latest draft release

        uses: actions/github-script@v7

        with:

          script: |

            try {

              const releases = await github.rest.repos.listReleases({

                owner: context.repo.owner,

                repo: context.repo.repo

              });
 
              const draft = releases.data.find(r => r.draft);

              if (!draft) {

                core.setFailed("No draft release found to publish.");

                return;

              }
 
              console.log(`Found draft release: ${draft.tag_name} (ID: ${draft.id})`);
 
              const response = await github.rest.repos.updateRelease({

                owner: context.repo.owner,

                repo: context.repo.repo,

                release_id: draft.id,

                draft: false

              });
 
              console.log(`API response: ${JSON.stringify(response.data, null, 2)}`);

              console.log(`âœ… Draft release "${draft.tag_name}" published!`);

            } catch (error) {

              core.setFailed(`Failed to publish release: ${error.message}`);

            }
 
